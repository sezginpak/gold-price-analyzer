"""
Y√ºksek ƒ∞≈ülem Maliyeti Stratejisi Test Scripti
%0.45 toplam maliyet ile kar etme potansiyelini test eder
"""
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class HighCostStrategyTester:
    """Y√ºksek maliyet stratejisi test edilir"""
    
    def __init__(self):
        self.db_path = "gold_prices.db"
        self.total_cost_percentage = 0.0045  # %0.45 toplam maliyet
        
    def run_tests(self):
        """Ana test fonksiyonu"""
        logger.info("=== Y√úKSEK MALƒ∞YET STRATEJƒ∞Sƒ∞ TESTƒ∞ BA≈ûLADI ===")
        logger.info(f"Toplam i≈ülem maliyeti: {self.total_cost_percentage:.2%}")
        
        # 1. Sim√ºlasyon konfig√ºrasyonlarƒ±nƒ± kontrol et
        self.check_simulation_configs()
        
        # 2. Minimum kar e≈üiklerini hesapla
        self.calculate_profit_thresholds()
        
        # 3. Teorik senaryolarƒ± test et
        self.test_theoretical_scenarios()
        
        logger.info("=== TEST TAMAMLANDI ===")
    
    def check_simulation_configs(self):
        """Sim√ºlasyon konfig√ºrasyonlarƒ±nƒ± kontrol et"""
        logger.info("\nüìä Sƒ∞M√úLASYON KONFƒ∞G√úRASYONLARI:")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT name, min_confidence, max_risk, spread, commission_rate 
                FROM simulations 
                WHERE name LIKE 'Y√ºksek Maliyet%'
            """)
            
            for row in cursor.fetchall():
                name, min_conf, max_risk, spread, commission = row
                logger.info(f"  {name}:")
                logger.info(f"    Min Confidence: {min_conf:.1%}")
                logger.info(f"    Max Risk: {max_risk:.1%}")
                logger.info(f"    Spread: {spread} TL")
                logger.info(f"    Commission: {commission:.2%}")
                
                # Toplam maliyet hesapla (yakla≈üƒ±k)
                # Spread %0.11 + Commission %0.10 = %0.21 tek y√∂n x2 = %0.42 gidi≈ü-d√∂n√º≈ü
                estimated_cost = 0.0042  # %0.42
                logger.info(f"    Estimated Total Cost: {estimated_cost:.2%}")
                logger.info("")
            
            conn.close()
            
        except Exception as e:
            logger.error(f"Config kontrol hatasƒ±: {str(e)}")
    
    def calculate_profit_thresholds(self):
        """Kar e≈üiklerini hesapla"""
        logger.info("\nüí∞ KAR E≈ûƒ∞KLERƒ∞ ANALƒ∞Zƒ∞:")
        
        # Temel hesaplamalar
        spread_cost = 0.0011  # %0.11 spread
        commission_cost = 0.001  # %0.10 commission
        total_one_way = spread_cost + commission_cost  # %0.21
        total_round_trip = total_one_way * 2  # %0.42 gidi≈ü-d√∂n√º≈ü
        
        logger.info(f"  Spread maliyeti: {spread_cost:.2%}")
        logger.info(f"  Komisyon maliyeti: {commission_cost:.2%}")
        logger.info(f"  Tek y√∂n toplam: {total_one_way:.2%}")
        logger.info(f"  Gidi≈ü-d√∂n√º≈ü toplam: {total_round_trip:.2%}")
        
        # Breakeven ve kar e≈üikleri
        breakeven = total_round_trip
        min_profit_target = breakeven * 1.5  # %50 √ºst√º
        good_profit_target = breakeven * 2.0  # %100 √ºst√º
        excellent_profit_target = breakeven * 3.0  # %200 √ºst√º
        
        logger.info(f"\n  üéØ HEDEF E≈ûIKLER:")
        logger.info(f"    Breakeven: {breakeven:.2%}")
        logger.info(f"    Minimum Kar: {min_profit_target:.2%}")
        logger.info(f"    ƒ∞yi Kar: {good_profit_target:.2%}")
        logger.info(f"    M√ºkemmel Kar: {excellent_profit_target:.2%}")
        
        # Risk/Reward oranlarƒ±
        logger.info(f"\n  üìà GEREKLƒ∞ Rƒ∞SK/REWARD ORANLARI:")
        for risk_pct in [0.5, 1.0, 1.5, 2.0]:
            rr_ratio = min_profit_target / (risk_pct / 100)
            logger.info(f"    {risk_pct}% risk i√ßin: {rr_ratio:.1f}:1 RR gerekli")
    
    def test_theoretical_scenarios(self):
        """Teorik senaryolarƒ± test et"""
        logger.info("\nüß™ TEORƒ∞K SENARYO TESTƒ∞:")
        
        scenarios = [
            {
                "name": "Konservatif Strateji",
                "confidence": 0.85,
                "risk_per_trade": 0.012,  # %1.2
                "avg_rr_ratio": 5.0,
                "win_rate": 0.65,
                "trades_per_month": 8
            },
            {
                "name": "Trend Takip Stratejisi", 
                "confidence": 0.80,
                "risk_per_trade": 0.015,  # %1.5
                "avg_rr_ratio": 4.0,
                "win_rate": 0.60,
                "trades_per_month": 12
            },
            {
                "name": "Dip Yakalama Stratejisi",
                "confidence": 0.75,
                "risk_per_trade": 0.018,  # %1.8
                "avg_rr_ratio": 4.5,
                "win_rate": 0.55,
                "trades_per_month": 6
            }
        ]
        
        total_cost = 0.0042  # %0.42
        
        for scenario in scenarios:
            logger.info(f"\n  üìä {scenario['name']}:")
            
            # Hesaplamalar
            avg_win = scenario['risk_per_trade'] * scenario['avg_rr_ratio']
            avg_loss = scenario['risk_per_trade']
            win_rate = scenario['win_rate']
            
            # Beklenen getiri
            expected_return = (win_rate * avg_win) - ((1 - win_rate) * avg_loss)
            
            # Maliyet d√º≈ü√ºld√ºkten sonra net getiri
            net_return = expected_return - total_cost
            
            # Aylƒ±k beklenen getiri
            monthly_return = net_return * scenario['trades_per_month']
            
            logger.info(f"    Win Rate: {win_rate:.1%}")
            logger.info(f"    Avg Win: {avg_win:.2%}")
            logger.info(f"    Avg Loss: {avg_loss:.2%}")
            logger.info(f"    Gross Expected Return/Trade: {expected_return:.2%}")
            logger.info(f"    Net Return After Costs: {net_return:.2%}")
            logger.info(f"    Monthly Trades: {scenario['trades_per_month']}")
            logger.info(f"    Monthly Expected Return: {monthly_return:.2%}")
            
            # Karlƒ±lƒ±k deƒüerlendirmesi
            if net_return > 0:
                logger.info(f"    ‚úÖ Karlƒ± strateji! Net getiri: {net_return:.2%}")
            else:
                logger.info(f"    ‚ùå Zararlƒ± strateji! Net kayƒ±p: {net_return:.2%}")
                
            # Minimum win rate hesapla
            min_win_rate = (avg_loss + total_cost) / (avg_win + avg_loss + total_cost)
            logger.info(f"    Minimum Win Rate for Profit: {min_win_rate:.1%}")
    
    def analyze_current_market_conditions(self):
        """Mevcut piyasa ko≈üullarƒ±nƒ± analiz et"""
        logger.info("\nüìà Pƒ∞YASA KO≈ûULLARI ANALƒ∞Zƒ∞:")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Son fiyat verilerini al
            cursor.execute("""
                SELECT price, timestamp 
                FROM price_data 
                ORDER BY timestamp DESC 
                LIMIT 100
            """)
            
            prices = [row[0] for row in cursor.fetchall()]
            
            if len(prices) >= 20:
                # Volatilite hesapla
                import statistics
                recent_returns = []
                for i in range(1, min(20, len(prices))):
                    ret = (prices[i-1] - prices[i]) / prices[i]
                    recent_returns.append(ret)
                
                volatility = statistics.stdev(recent_returns) if recent_returns else 0
                avg_return = statistics.mean(recent_returns) if recent_returns else 0
                
                logger.info(f"  G√ºnl√ºk Volatilite: {volatility:.2%}")
                logger.info(f"  Ortalama G√ºnl√ºk Getiri: {avg_return:.2%}")
                
                # Y√ºksek maliyet i√ßin uygunluk
                min_required_volatility = 0.008  # %0.8
                if volatility >= min_required_volatility:
                    logger.info(f"  ‚úÖ Volatilite yeterli ({volatility:.2%} >= {min_required_volatility:.2%})")
                else:
                    logger.info(f"  ‚ö†Ô∏è  Volatilite d√º≈ü√ºk ({volatility:.2%} < {min_required_volatility:.2%})")
            
            conn.close()
            
        except Exception as e:
            logger.error(f"Piyasa analizi hatasƒ±: {str(e)}")


def main():
    """Ana fonksiyon"""
    tester = HighCostStrategyTester()
    tester.run_tests()
    
    # Sonu√ß √∂zeti
    logger.info("\n" + "="*60)
    logger.info("SONU√á √ñZETƒ∞:")
    logger.info("="*60)
    logger.info("‚úÖ Y√ºksek maliyet stratejisi ≈üu ko≈üullarda karlƒ± olabilir:")
    logger.info("   ‚Ä¢ Minimum %75-85 g√ºven skorlu sinyaller")
    logger.info("   ‚Ä¢ 4:1 veya daha y√ºksek Risk/Reward oranƒ±")
    logger.info("   ‚Ä¢ %60+ win rate")
    logger.info("   ‚Ä¢ Yeterli piyasa volatilitesi (%0.8+)")
    logger.info("   ‚Ä¢ Sƒ±kƒ± pozisyon boyutu kontrol√º")
    logger.info("   ‚Ä¢ G√º√ßl√º trend uyumu")
    logger.info("")
    logger.info("‚ö†Ô∏è  Kritik ba≈üarƒ± fakt√∂rleri:")
    logger.info("   ‚Ä¢ √áok se√ßici sinyal filtresi")
    logger.info("   ‚Ä¢ M√ºkemmel giri≈ü/√ßƒ±kƒ±≈ü timing'i")
    logger.info("   ‚Ä¢ Disiplinli risk y√∂netimi")
    logger.info("   ‚Ä¢ Piyasa ko≈üullarƒ±na adaptasyon")


if __name__ == "__main__":
    main()