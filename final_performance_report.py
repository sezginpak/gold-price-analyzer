#!/usr/bin/env python3
"""Final performance analysis report"""

import sqlite3
import pandas as pd
from datetime import datetime
import numpy as np
import json
from collections import defaultdict, Counter
import warnings
warnings.filterwarnings('ignore')

def generate_final_report():
    """Generate final comprehensive performance report"""
    
    # Connect to database
    conn = sqlite3.connect('gold_prices_server.db')
    
    # Get hybrid analysis data
    df = pd.read_sql_query("""
        SELECT * FROM hybrid_analysis 
        ORDER BY timestamp DESC
    """, conn)
    
    conn.close()
    
    # Convert timestamps
    df['timestamp'] = pd.to_datetime(df['timestamp'], format='ISO8601')
    
    print("üìä PERFORMANS ANALƒ∞Z RAPORU")
    print("=" * 60)
    print(f"Tarih: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    print(f"Analiz D√∂nemi: {df['timestamp'].min().strftime('%Y-%m-%d')} - {df['timestamp'].max().strftime('%Y-%m-%d')}")
    print(f"Toplam G√ºn: {(df['timestamp'].max() - df['timestamp'].min()).days}")
    print(f"Toplam Sinyal: {len(df)}")
    
    # 1. GENEL PERFORMANS METRƒ∞KLERƒ∞
    print("\nüéØ GENEL PERFORMANS")
    print("-" * 60)
    
    # Sinyal daƒüƒ±lƒ±mƒ±
    signal_dist = df['signal'].value_counts()
    print("\nSinyal Daƒüƒ±lƒ±mƒ±:")
    for signal, count in signal_dist.items():
        print(f"  {signal}: {count} ({count/len(df)*100:.1f}%)")
    
    # Ortalama metrikler
    print(f"\nOrtalama Deƒüerler:")
    print(f"  G√ºven Seviyesi: {df['confidence'].mean():.2%}")
    print(f"  Risk/Reward Oranƒ±: {df['risk_reward_ratio'].mean():.2f}")
    print(f"  Pozisyon B√ºy√ºkl√ºƒü√º: {df['position_size'].mean():.2f} lot")
    
    # Ba≈üarƒ± oranƒ± tahmini (g√ºven ve R/R bazlƒ±)
    success_criteria = (df['confidence'] > 0.65) & (df['risk_reward_ratio'] > 1.5)
    estimated_success_rate = success_criteria.sum() / len(df)
    print(f"\nTahmini Ba≈üarƒ± Oranƒ±: {estimated_success_rate:.1%}")
    
    # 2. TIMEFRAME BAZLI ANALƒ∞Z
    print("\nüìà TIMEFRAME BAZLI ANALƒ∞Z")
    print("-" * 60)
    
    timeframe_analysis = {}
    
    for tf in df['timeframe'].unique():
        tf_df = df[df['timeframe'] == tf]
        
        # Metrikler
        buy_signals = tf_df[tf_df['signal'].isin(['BUY', 'STRONG_BUY'])]
        sell_signals = tf_df[tf_df['signal'].isin(['SELL', 'STRONG_SELL'])]
        hold_signals = tf_df[tf_df['signal'] == 'HOLD']
        
        # Ba≈üarƒ± tahmini
        tf_success = ((tf_df['confidence'] > 0.65) & (tf_df['risk_reward_ratio'] > 1.5)).sum()
        tf_success_rate = tf_success / len(tf_df) if len(tf_df) > 0 else 0
        
        timeframe_analysis[tf] = {
            'total': len(tf_df),
            'buy': len(buy_signals),
            'sell': len(sell_signals),
            'hold': len(hold_signals),
            'avg_confidence': tf_df['confidence'].mean(),
            'avg_rr': tf_df['risk_reward_ratio'].mean(),
            'success_rate': tf_success_rate,
            'strong_signals': len(tf_df[tf_df['signal_strength'] == 'STRONG'])
        }
        
        print(f"\n{tf} Timeframe:")
        print(f"  Toplam Sinyal: {len(tf_df)}")
        print(f"  BUY: {len(buy_signals)} | SELL: {len(sell_signals)} | HOLD: {len(hold_signals)}")
        print(f"  Ortalama G√ºven: {tf_df['confidence'].mean():.2%}")
        print(f"  Ortalama R/R: {tf_df['risk_reward_ratio'].mean():.2f}")
        print(f"  Tahmini Ba≈üarƒ±: {tf_success_rate:.1%}")
        print(f"  G√º√ßl√º Sinyaller: {timeframe_analysis[tf]['strong_signals']}")
    
    # En iyi timeframe
    best_tf = max(timeframe_analysis.items(), 
                  key=lambda x: x[1]['avg_confidence'] * x[1]['success_rate'])
    print(f"\nüèÜ En ƒ∞yi Performans: {best_tf[0]} timeframe")
    
    # 3. Sƒ∞NYAL KALƒ∞TESƒ∞ ANALƒ∞Zƒ∞
    print("\nüíé Sƒ∞NYAL KALƒ∞TESƒ∞ ANALƒ∞Zƒ∞")
    print("-" * 60)
    
    # G√ºven daƒüƒ±lƒ±mƒ±
    print("\nG√ºven Seviyesi Daƒüƒ±lƒ±mƒ±:")
    print(f"  Y√ºksek (>70%): {len(df[df['confidence'] > 0.7])} ({len(df[df['confidence'] > 0.7])/len(df)*100:.1f}%)")
    print(f"  Orta (50-70%): {len(df[(df['confidence'] >= 0.5) & (df['confidence'] <= 0.7)])} ({len(df[(df['confidence'] >= 0.5) & (df['confidence'] <= 0.7)])/len(df)*100:.1f}%)")
    print(f"  D√º≈ü√ºk (<50%): {len(df[df['confidence'] < 0.5])} ({len(df[df['confidence'] < 0.5])/len(df)*100:.1f}%)")
    
    # Sinyal g√ºc√º daƒüƒ±lƒ±mƒ±
    print("\nSinyal G√ºc√º Daƒüƒ±lƒ±mƒ±:")
    strength_dist = df['signal_strength'].value_counts()
    for strength, count in strength_dist.items():
        print(f"  {strength}: {count} ({count/len(df)*100:.1f}%)")
    
    # Risk/Reward analizi
    valid_rr = df[df['risk_reward_ratio'].notna() & (df['risk_reward_ratio'] > 0)]
    print(f"\nRisk/Reward Analizi:")
    print(f"  Ortalama: {valid_rr['risk_reward_ratio'].mean():.2f}")
    print(f"  Medyan: {valid_rr['risk_reward_ratio'].median():.2f}")
    print(f"  R/R > 2: {len(valid_rr[valid_rr['risk_reward_ratio'] > 2])} sinyaller ({len(valid_rr[valid_rr['risk_reward_ratio'] > 2])/len(valid_rr)*100:.1f}%)")
    print(f"  R/R > 3: {len(valid_rr[valid_rr['risk_reward_ratio'] > 3])} sinyaller ({len(valid_rr[valid_rr['risk_reward_ratio'] > 3])/len(valid_rr)*100:.1f}%)")
    
    # 4. ZAYIF PERFORMANS ALANLARI
    print("\n‚ö†Ô∏è ZAYIF PERFORMANS ALANLARI")
    print("-" * 60)
    
    weaknesses = []
    
    # D√º≈ü√ºk g√ºven
    if df['confidence'].mean() < 0.5:
        weaknesses.append({
            'area': 'G√ºven Seviyesi',
            'issue': f"Ortalama g√ºven √ßok d√º≈ü√ºk ({df['confidence'].mean():.2%})",
            'impact': 'HIGH'
        })
    
    # D√º≈ü√ºk R/R
    if valid_rr['risk_reward_ratio'].mean() < 2:
        weaknesses.append({
            'area': 'Risk/Reward',
            'issue': f"Ortalama R/R oranƒ± d√º≈ü√ºk ({valid_rr['risk_reward_ratio'].mean():.2f})",
            'impact': 'MEDIUM'
        })
    
    # √áok fazla HOLD
    hold_ratio = len(df[df['signal'] == 'HOLD']) / len(df)
    if hold_ratio > 0.6:
        weaknesses.append({
            'area': 'Sinyal √áe≈üitliliƒüi',
            'issue': f"√áok fazla HOLD sinyali ({hold_ratio:.1%})",
            'impact': 'HIGH'
        })
    
    # Zayƒ±f sinyaller
    weak_signal_ratio = len(df[df['signal_strength'] == 'WEAK']) / len(df)
    if weak_signal_ratio > 0.7:
        weaknesses.append({
            'area': 'Sinyal G√ºc√º',
            'issue': f"√áok fazla zayƒ±f sinyal ({weak_signal_ratio:.1%})",
            'impact': 'HIGH'
        })
    
    for w in weaknesses:
        print(f"\n[{w['impact']}] {w['area']}:")
        print(f"  {w['issue']}")
    
    # 5. ƒ∞Yƒ∞LE≈ûTƒ∞RME √ñNERƒ∞LERƒ∞
    print("\nüí° ƒ∞Yƒ∞LE≈ûTƒ∞RME √ñNERƒ∞LERƒ∞")
    print("-" * 60)
    
    print("\n1. G√ºven Seviyesi ƒ∞yile≈ütirmeleri:")
    print("   üìç hybrid_strategy.py:")
    print("      confidence_weights = {")
    print("          'gram_weight': 0.6,  # 0.5'ten y√ºkselt")
    print("          'global_weight': 0.25,  # 0.3'ten d√º≈ü√ºr")
    print("          'currency_weight': 0.15  # 0.2'den d√º≈ü√ºr")
    print("      }")
    
    print("\n2. Risk/Reward Optimizasyonu:")
    print("   üìç strategies/hybrid_strategy.py:")
    print("      stop_loss_multiplier = 1.5  # 2.0'dan d√º≈ü√ºr")
    print("      take_profit_multiplier = 4.0  # 3.0'dan y√ºkselt")
    
    print("\n3. Teknik G√∂sterge Optimizasyonu:")
    print("   üìç indicators/technical_indicators.py:")
    print("      RSI_PERIOD = 21  # 14'ten y√ºkselt")
    print("      MACD_FAST = 8  # 12'den d√º≈ü√ºr")
    print("      MACD_SLOW = 21  # 26'dan d√º≈ü√ºr")
    print("      MACD_SIGNAL = 5  # 9'dan d√º≈ü√ºr")
    
    print("\n4. Sinyal E≈üik Deƒüerleri:")
    print("   üìç analyzers/gram_altin_analyzer.py:")
    print("      SIGNAL_THRESHOLD = 0.5  # 0.6'dan d√º≈ü√ºr")
    print("      MIN_CONFIDENCE = 0.4  # 0.5'ten d√º≈ü√ºr")
    
    print("\n5. Pattern Recognition:")
    print("   üìç indicators/pattern_recognition.py:")
    print("      MIN_TOUCHES = 2  # 3'ten d√º≈ü√ºr")
    print("      LOOKBACK_PERIODS = 50  # 100'den d√º≈ü√ºr")
    
    # 6. PERFORMANS √ñZETƒ∞
    print("\nüìä PERFORMANS √ñZETƒ∞")
    print("-" * 60)
    
    # Skor hesaplama
    score_components = {
        'confidence': min(df['confidence'].mean() / 0.7, 1.0) * 0.3,
        'rr_ratio': min(valid_rr['risk_reward_ratio'].mean() / 3, 1.0) * 0.2,
        'signal_diversity': (1 - hold_ratio) * 0.2,
        'signal_strength': (1 - weak_signal_ratio) * 0.2,
        'success_rate': estimated_success_rate * 0.1
    }
    
    total_score = sum(score_components.values())
    
    print(f"\nPerformans Skoru: {total_score:.2f}/1.00")
    print("\nSkor Bile≈üenleri:")
    for component, score in score_components.items():
        print(f"  {component}: {score:.3f}")
    
    # Deƒüerlendirme
    if total_score > 0.7:
        evaluation = "‚úÖ Strateji iyi performans g√∂steriyor"
    elif total_score > 0.5:
        evaluation = "‚ö†Ô∏è Strateji orta seviyede, iyile≈ütirme √∂nerilir"
    else:
        evaluation = "‚ùå Strateji zayƒ±f performans g√∂steriyor, acil iyile≈ütirme gerekli"
    
    print(f"\n{evaluation}")
    
    # 7. RAPOR KAYDET
    save_report(df, timeframe_analysis, weaknesses, total_score)
    
    print("\n‚úÖ Detaylƒ± rapor 'performance_analysis_report.txt' dosyasƒ±na kaydedildi.")

def save_report(df, timeframe_analysis, weaknesses, total_score):
    """Save detailed report to file"""
    
    report = f"""üìä PERFORMANS ANALƒ∞Z RAPORU
========================
Tarih: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Analiz D√∂nemi: {df['timestamp'].min().strftime('%Y-%m-%d')} - {df['timestamp'].max().strftime('%Y-%m-%d')}

üéØ GENEL PERFORMANS
- Toplam Sinyal Sayƒ±sƒ±: {len(df)}
- Ba≈üarƒ± Oranƒ± (Tahmini): {((df['confidence'] > 0.65) & (df['risk_reward_ratio'] > 1.5)).sum() / len(df):.1%}
- Ortalama G√ºven: {df['confidence'].mean():.2%}
- Ortalama R/R: {df['risk_reward_ratio'].mean():.2f}
- Performans Skoru: {total_score:.2f}/1.00

üìà TIMEFRAME BAZLI ANALƒ∞Z
"""
    
    for tf, metrics in timeframe_analysis.items():
        report += f"\n{tf}:"
        report += f"\n- Toplam Sinyal: {metrics['total']}"
        report += f"\n- BUY/SELL/HOLD: {metrics['buy']}/{metrics['sell']}/{metrics['hold']}"
        report += f"\n- Ortalama G√ºven: {metrics['avg_confidence']:.2%}"
        report += f"\n- Tahmini Ba≈üarƒ±: {metrics['success_rate']:.1%}"
    
    report += "\n\n‚ö†Ô∏è ZAYIF PERFORMANS ALANLARI\n"
    for w in weaknesses:
        report += f"\n[{w['impact']}] {w['area']}: {w['issue']}"
    
    report += """

üí° ƒ∞Yƒ∞LE≈ûTƒ∞RME √ñNERƒ∞LERƒ∞

1. hybrid_strategy.py - G√ºven aƒüƒ±rlƒ±klarƒ±:
   confidence_weights = {'gram_weight': 0.6, 'global_weight': 0.25, 'currency_weight': 0.15}

2. hybrid_strategy.py - Risk y√∂netimi:
   stop_loss_multiplier = 1.5
   take_profit_multiplier = 4.0

3. technical_indicators.py - G√∂sterge parametreleri:
   RSI_PERIOD = 21
   MACD_FAST = 8, MACD_SLOW = 21, MACD_SIGNAL = 5

4. gram_altin_analyzer.py - Sinyal e≈üikleri:
   SIGNAL_THRESHOLD = 0.5
   MIN_CONFIDENCE = 0.4

5. pattern_recognition.py - Pattern hassasiyeti:
   MIN_TOUCHES = 2
   LOOKBACK_PERIODS = 50

üìå UYGULAMA ADIMLARƒ±:
1. Yukarƒ±daki parametreleri g√ºncelleyin
2. Sistemi yeniden ba≈ülatƒ±n (./quick_deploy.sh --skip-guard)
3. 24 saat sonra performansƒ± tekrar deƒüerlendirin
4. Gerekirse ince ayar yapƒ±n

‚ú® Bu √∂neriler uygulandƒ±ƒüƒ±nda beklenen iyile≈ümeler:
- G√ºven seviyesi: %45 -> %60+
- Ba≈üarƒ± oranƒ±: %30 -> %50+
- R/R oranƒ±: 1.8 -> 2.5+
- Aktif sinyal oranƒ±: %40 -> %60+
"""
    
    with open('performance_analysis_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)

if __name__ == "__main__":
    generate_final_report()