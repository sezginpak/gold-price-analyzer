"""
Hibrit Strateji - Gram altƒ±n, global trend ve kur riskini birle≈ütiren ana strateji
"""
from typing import Dict, Any, List, Tuple, Optional
from decimal import Decimal
import logging
from collections import defaultdict
from utils import timezone

from models.market_data import MarketData, GramAltinCandle
from analyzers.gram_altin_analyzer import GramAltinAnalyzer
from analyzers.global_trend_analyzer import GlobalTrendAnalyzer
from analyzers.currency_risk_analyzer import CurrencyRiskAnalyzer
from indicators.cci import CCI
from indicators.mfi import MFI
from indicators.advanced_patterns import AdvancedPatternRecognition
from analyzers.multi_day_pattern import MultiDayPatternAnalyzer
from utils.risk_management import KellyRiskManager
from utils.constants import (
    SignalType, RiskLevel, StrengthLevel,
    SIGNAL_STRENGTH_MULTIPLIERS, 
    RISK_POSITION_MULTIPLIERS,
    CONFIDENCE_POSITION_MULTIPLIERS,
    MIN_CONFIDENCE_THRESHOLDS,
    MIN_VOLATILITY_THRESHOLD,
    GLOBAL_TREND_MISMATCH_PENALTY
)

# Mod√ºler bile≈üenler
from .hybrid.signal_combiner import SignalCombiner
from .hybrid.confluence_manager import ConfluenceManager
from .hybrid.divergence_manager import DivergenceManager
from .hybrid.structure_manager import StructureManager
from .hybrid.momentum_manager import MomentumManager
from .hybrid.smart_money_manager import SmartMoneyManager

logger = logging.getLogger(__name__)


class HybridStrategy:
    """T√ºm analizleri birle≈ütiren hibrit strateji - Orchestrator"""
    
    def __init__(self, storage=None):
        # Ana analiz√∂rler
        self.gram_analyzer = GramAltinAnalyzer()
        self.global_analyzer = GlobalTrendAnalyzer()
        self.currency_analyzer = CurrencyRiskAnalyzer()
        
        # Yeni g√∂stergeler
        self.cci = CCI(period=20)
        self.mfi = MFI(period=14)
        self.pattern_recognizer = AdvancedPatternRecognition()
        self.risk_manager = KellyRiskManager()
        
        # Mod√ºler bile≈üenler
        self.signal_combiner = SignalCombiner()
        self.confluence_manager = ConfluenceManager(storage)
        self.divergence_manager = DivergenceManager()
        self.structure_manager = StructureManager()
        self.momentum_manager = MomentumManager()
        self.smart_money_manager = SmartMoneyManager()
        self.multi_day_analyzer = MultiDayPatternAnalyzer(lookback_days=3)
        
        # Storage referansƒ±
        self.storage = storage
    
    def analyze(self, gram_candles: List[GramAltinCandle], 
                market_data: List[MarketData], timeframe: str = "15m") -> Dict[str, Any]:
        """
        T√ºm analizleri birle≈ütirerek nihai sinyal √ºret
        
        Args:
            gram_candles: Gram altƒ±n mum verileri
            market_data: Genel piyasa verileri
            
        Returns:
            Birle≈üik analiz sonu√ßlarƒ± ve sinyal
        """
        try:
            # 1. Gram altƒ±n analizi (ana sinyal)
            logger.info(f"Gram analizi ba≈ülƒ±yor. Mum sayƒ±sƒ±: {len(gram_candles)}")
            gram_analysis = self.gram_analyzer.analyze(gram_candles)
            self._last_gram_analysis = gram_analysis  # RSI i√ßin sakla
            logger.info(f"Gram analizi tamamlandƒ±. Fiyat: {gram_analysis.get('price')}")
            
            # Fiyat kontrol√º - eƒüer None veya 0 ise son mum fiyatƒ±nƒ± kullan
            if not gram_analysis.get('price') or gram_analysis.get('price') == 0:
                if gram_candles and len(gram_candles) > 0:
                    gram_analysis['price'] = gram_candles[-1].close
                    logger.warning(f"Gram price was None/0, using last candle close price: {gram_analysis['price']}")
                else:
                    logger.error("No gram price and no candles available")
                    return self._empty_result()
            
            # 2. Global trend analizi
            global_analysis = self.global_analyzer.analyze(market_data)
            
            # 3. Kur riski analizi
            currency_analysis = self.currency_analyzer.analyze(market_data)
            
            # 4. Geli≈ümi≈ü g√∂stergeler (CCI ve MFI)
            advanced_indicators = self._analyze_advanced_indicators(gram_candles)
            
            # 5. Pattern tanƒ±ma
            pattern_analysis = self._analyze_patterns(gram_candles)
            
            # 6. Divergence analizi
            divergence_analysis = self.divergence_manager.analyze_divergences(
                gram_candles, gram_analysis.get('indicators', {})
            )
            
            # 7. Confluence analizi
            confluence_analysis = self.confluence_manager.analyze_confluence(
                timeframe, 
                gram_analysis.get('signal', 'HOLD'),
                gram_analysis
            )
            
            # 8. Market structure analizi
            structure_analysis = self.structure_manager.analyze_market_structure(
                gram_candles, 
                float(gram_analysis.get('price', 0))
            )
            
            # 9. Momentum exhaustion analizi
            momentum_analysis = self.momentum_manager.analyze_momentum_exhaustion(
                gram_candles,
                gram_analysis.get('indicators', {})
            )
            
            # 10. Smart money analizi
            key_levels = structure_analysis.get('key_levels', {})
            smart_money_analysis = self.smart_money_manager.analyze_smart_money(
                gram_candles,
                key_levels
            )
            
            # 11. Multi-day pattern analizi
            multi_day_pattern = self.multi_day_analyzer.analyze(gram_candles)
            
            # 12. Volatilite kontrol√º
            current_price = float(gram_analysis.get('price', 0))
            atr_data = gram_analysis.get('indicators', {}).get('atr', {})
            # ATR bir dict ise value'sunu al, deƒüilse direkt kullan
            if isinstance(atr_data, dict):
                atr_value = atr_data.get('value', 1.0)
            else:
                atr_value = atr_data if atr_data else 1.0
            market_volatility = (atr_value / current_price * 100) if current_price > 0 else 0
            
            # 12. Sinyalleri birle≈ütir
            logger.debug(f"üîÑ HYBRID: Calling signal combiner for {timeframe}")
            logger.debug(f"üîÑ HYBRID: Gram signal = {gram_analysis.get('signal')}")
            combined_signal = self._combine_signals(
                gram_analysis, global_analysis, currency_analysis,
                advanced_indicators, pattern_analysis, timeframe, market_volatility,
                divergence_analysis, momentum_analysis, smart_money_analysis, multi_day_pattern
            )
            logger.debug(f"üîÑ HYBRID: Combined signal = {combined_signal.get('signal')}")
            
            # 7. Kelly Criterion ile pozisyon boyutu hesapla
            position_details = self._calculate_kelly_position(
                combined_signal, gram_analysis, currency_analysis
            )
            
            # 8. Stop-loss ve take-profit ayarla
            risk_levels = self._adjust_risk_levels(
                gram_analysis, currency_analysis
            )
            
            return {
                "timestamp": timezone.utc_now(),
                "gram_price": gram_analysis.get("price"),
                
                # Ana sinyal
                "signal": combined_signal["signal"],
                "confidence": combined_signal["confidence"],
                "signal_strength": combined_signal["strength"],
                
                # Risk y√∂netimi
                "position_size": position_details.get("lots", 0),
                "position_details": position_details,
                "stop_loss": risk_levels["stop_loss"],
                "take_profit": risk_levels["take_profit"],
                "risk_reward_ratio": risk_levels["risk_reward_ratio"],
                
                # Detaylƒ± analizler
                "gram_analysis": gram_analysis,
                "global_trend": global_analysis,
                "currency_risk": currency_analysis,
                "advanced_indicators": advanced_indicators,
                "pattern_analysis": pattern_analysis,
                "divergence_analysis": divergence_analysis,
                "confluence_analysis": confluence_analysis,
                "structure_analysis": structure_analysis,
                "momentum_analysis": momentum_analysis,
                "smart_money_analysis": smart_money_analysis,
                
                # Dip Detection bilgileri
                "dip_detection": combined_signal.get("dip_detection", {}),
                
                # √ñzet ve √∂neriler
                "summary": self._create_summary(
                    combined_signal, gram_analysis, global_analysis, currency_analysis
                ),
                "recommendations": self._get_recommendations(
                    combined_signal, position_details, currency_analysis
                )
            }
            
        except Exception as e:
            logger.error(f"Hibrit strateji hatasƒ±: {e}", exc_info=True)
            return self._empty_result()
    
    def _combine_signals(self, gram: Dict, global_trend: Dict, 
                        currency: Dict, advanced: Dict, patterns: Dict, 
                        timeframe: str, market_volatility: float,
                        divergence: Dict = None, momentum: Dict = None,
                        smart_money: Dict = None, multi_day_pattern: Dict = None) -> Dict[str, Any]:
        """Sinyalleri birle≈ütir - Mod√ºler signal combiner kullan"""
        return self.signal_combiner.combine_signals(
            gram_signal=gram,
            global_trend=global_trend,
            currency_risk=currency,
            advanced_indicators=advanced,
            patterns=patterns,
            timeframe=timeframe,
            market_volatility=market_volatility,
            divergence_data=divergence,
            momentum_data=momentum,
            smart_money_data=smart_money,
            multi_day_pattern=multi_day_pattern
        )
    
    def _calculate_position_size(self, signal: Dict, currency: Dict) -> Dict[str, Any]:
        """Risk ayarlƒ± pozisyon b√ºy√ºkl√ºƒü√º hesapla"""
        base_position = 1.0  # %100 temel pozisyon
        
        # Sinyal g√ºc√ºne g√∂re ayarla - constants'tan al
        position = base_position * SIGNAL_STRENGTH_MULTIPLIERS.get(signal["strength"], 0.5)
        
        # Kur riski √ßarpanƒ±
        currency_multiplier = currency.get("position_size_multiplier", 0.8)
        position *= currency_multiplier
        
        # G√ºven skoruna g√∂re dinamik ayarlama (doƒürusal √∂l√ßekleme)
        confidence = signal.get("confidence", 0.5)
        
        # G√ºven skoru bazlƒ± √ßarpan - lookup table kullan
        confidence_multiplier = 0.5  # varsayƒ±lan
        for (min_conf, max_conf), mult in CONFIDENCE_POSITION_MULTIPLIERS.items():
            if min_conf <= confidence < max_conf:
                confidence_multiplier = mult
                break
        
        position *= confidence_multiplier
        
        # HOLD sinyali i√ßin √∂zel ayarlama
        if signal.get("signal") == "HOLD":
            # HOLD durumunda g√ºven skoruna g√∂re pozisyon
            # G√ºven ne kadar y√ºksekse, o kadar az pozisyon (√ß√ºnk√º bekleme sinyali)
            position = 0.2 + (0.7 - confidence) * 0.3  # 0.2-0.5 arasƒ±
        
        # Minimum ve maksimum sƒ±nƒ±rlar
        position = max(0.2, min(1.0, position))
        
        result = {
            "recommended_size": round(position, 2),
            "max_size": 1.0,
            "min_size": 0.2,
            "risk_adjusted": True,
            "confidence_multiplier": round(confidence_multiplier, 2)
        }
        
        logger.info(f"Position calculation: base={base_position}, strength_mult={SIGNAL_STRENGTH_MULTIPLIERS.get(signal['strength'], 0.5)}, currency_mult={currency_multiplier}, confidence_mult={confidence_multiplier:.2f}, final={result['recommended_size']}")
        return result
    
    def _adjust_risk_levels(self, gram: Dict, currency: Dict) -> Dict[str, Any]:
        """Stop-loss ve take-profit seviyelerini ayarla"""
        stop_loss = gram.get("stop_loss")
        take_profit = gram.get("take_profit")
        
        if not stop_loss or not take_profit:
            return {
                "stop_loss": None,
                "take_profit": None,
                "risk_reward_ratio": None
            }
        
        # Y√ºksek kur riski varsa stop-loss'u sƒ±kƒ±la≈ütƒ±r
        risk_level = currency.get("risk_level", "MEDIUM")
        if risk_level in ["HIGH", "EXTREME"]:
            # Stop-loss'u %20 daha yakƒ±na al
            current_price = gram.get("price", stop_loss)
            if gram.get("signal") == "BUY":
                # BUY i√ßin stop_loss fiyatƒ±n altƒ±nda olmalƒ±
                distance = abs(current_price - stop_loss)
                stop_loss = current_price - (distance * Decimal("0.8"))
            else:  # SELL
                # SELL i√ßin stop_loss fiyatƒ±n √ºst√ºnde olmalƒ±
                distance = abs(stop_loss - current_price)
                stop_loss = current_price + (distance * Decimal("0.8"))
        
        # Risk/√ñd√ºl oranƒ±
        if gram.get("signal") == "BUY":
            risk = abs(float(gram["price"] - stop_loss))
            reward = abs(float(take_profit - gram["price"]))
        else:  # SELL
            risk = abs(float(stop_loss - gram["price"]))
            reward = abs(float(gram["price"] - take_profit))
        
        risk_reward_ratio = reward / risk if risk > 0 else 0
        
        return {
            "stop_loss": stop_loss,
            "take_profit": take_profit,
            "risk_reward_ratio": round(risk_reward_ratio, 2)
        }
    
    def _create_summary(self, signal: Dict, gram: Dict, 
                       global_trend: Dict, currency: Dict) -> str:
        """Analiz √∂zeti olu≈ütur"""
        parts = []
        
        # Sinyal √∂zeti
        if signal["signal"] != "HOLD":
            parts.append(f"{signal['signal']} sinyali ({signal['strength']} g√º√ßte)")
        else:
            parts.append("Bekleme pozisyonunda kalƒ±n")
        
        # Dip detection varsa ekle
        dip_detection = signal.get("dip_detection", {})
        if dip_detection.get("is_dip_opportunity"):
            parts.append(f"DIP FIRSAT TESPƒ∞Tƒ∞ (skor: {dip_detection.get('score', 0):.2f})")
            
        # Gram altƒ±n durumu
        gram_trend = gram.get("trend", "NEUTRAL")
        parts.append(f"Gram altƒ±n {gram_trend} trendinde")
        
        # Global durum
        global_dir = global_trend.get("trend_direction", "UNKNOWN")
        if global_dir != "UNKNOWN":
            parts.append(f"Global trend {global_dir}")
        
        # Risk durumu
        risk_level = currency.get("risk_level", "MEDIUM")
        if risk_level in ["HIGH", "EXTREME"]:
            parts.append(f"Y√ºksek kur riski ({risk_level})")
        
        return ". ".join(parts)
    
    def _get_recommendations(self, signal: Dict, position: Dict, 
                           currency: Dict) -> List[str]:
        """ƒ∞≈ülem √∂nerileri"""
        recommendations = []
        
        # Dip detection √∂zel durumu
        dip_detection = signal.get("dip_detection", {})
        if dip_detection.get("is_dip_opportunity") and signal["signal"] == "BUY":
            recommendations.append("üéØ DIP YAKALAMA FIRSATI - G√º√ßl√º alƒ±m sinyali")
            if signal.get("position_size_recommendation"):
                recommendations.append(f"√ñnerilen pozisyon: %{signal['position_size_recommendation']*100:.0f}")
            if signal.get("stop_loss_recommendation"):
                recommendations.append(signal["stop_loss_recommendation"])
            # Dip sinyallerini ekle
            for dip_signal in dip_detection.get("signals", []):
                recommendations.append(f"‚Ä¢ {dip_signal}")
        # Normal sinyal √∂nerisi
        elif signal["signal"] == "BUY":
            recommendations.append("Gram altƒ±n alƒ±mƒ± yapabilirsiniz")
        elif signal["signal"] == "SELL":
            recommendations.append("Gram altƒ±n satƒ±≈üƒ± d√º≈ü√ºnebilirsiniz")
        else:
            recommendations.append("Yeni pozisyon a√ßmayƒ±n")
        
        # Pozisyon b√ºy√ºkl√ºƒü√º
        risk_pct = position.get("risk_percentage", 0)
        if risk_pct > 0:
            if risk_pct < 1.0:
                recommendations.append(f"D√º≈ü√ºk pozisyon b√ºy√ºkl√ºƒü√º √∂nerilir (%{risk_pct:.1f} risk)")
            elif risk_pct < 1.5:
                recommendations.append(f"Orta pozisyon b√ºy√ºkl√ºƒü√º √∂nerilir (%{risk_pct:.1f} risk)")
            else:
                recommendations.append(f"Normal pozisyon b√ºy√ºkl√ºƒü√º uygun (%{risk_pct:.1f} risk)")
        
        # Risk uyarƒ±larƒ±
        if currency.get("intervention_risk", {}).get("has_risk"):
            recommendations.append("Merkez bankasƒ± m√ºdahale riski var, dikkatli olun")
        
        if signal["confidence"] < 0.6:
            recommendations.append("D√º≈ü√ºk g√ºven skoru, pozisyon a√ßmadan √∂nce bekleyin")
        
        return recommendations
    
    def _empty_result(self) -> Dict[str, Any]:
        """Bo≈ü sonu√ß"""
        return {
            "timestamp": timezone.utc_now(),
            "gram_price": 0,
            "signal": "HOLD",
            "signal_strength": "WEAK",
            "confidence": 0,
            "position_size": 0,
            "position_details": {"lots": 0, "risk_percentage": 0},
            "stop_loss": None,
            "take_profit": None,
            "risk_reward_ratio": None,
            "gram_analysis": {},
            "global_trend": {"trend_direction": "NEUTRAL"},
            "currency_risk": {"risk_level": "UNKNOWN"},
            "summary": "Analiz yapƒ±lamadƒ±",
            "recommendations": ["Veri bekleniyor"]
        }
    
    def _analyze_advanced_indicators(self, gram_candles: List[GramAltinCandle]) -> Dict[str, Any]:
        """CCI ve MFI g√∂stergelerini analiz et"""
        try:
            # DataFrame'e √ßevir
            import pandas as pd
            data = []
            for candle in gram_candles:
                data.append({
                    'high': float(candle.high),
                    'low': float(candle.low),
                    'close': float(candle.close),
                    'open': float(candle.open),
                    'volume': float(candle.volume) if hasattr(candle, 'volume') and candle.volume is not None else 0
                })
            
            df = pd.DataFrame(data)
            
            # CCI analizi
            cci_analysis = self.cci.get_analysis(df)
            
            # MFI analizi
            mfi_analysis = self.mfi.get_analysis(df)
            
            # Birle≈üik sinyal
            combined_signal = "NEUTRAL"
            combined_confidence = 0.5
            
            # CCI ve MFI sinyallerini birle≈ütir
            if cci_analysis['signal'] == mfi_analysis['signal'] and cci_analysis['signal'] != "NEUTRAL":
                combined_signal = cci_analysis['signal']
                combined_confidence = (cci_analysis['confidence'] + mfi_analysis['confidence']) / 2
            elif cci_analysis['extreme'] or mfi_analysis['extreme']:
                # Ekstrem durumlar
                if cci_analysis['extreme']:
                    combined_signal = cci_analysis['signal']
                    combined_confidence = cci_analysis['confidence']
                else:
                    combined_signal = mfi_analysis['signal']
                    combined_confidence = mfi_analysis['confidence']
            
            # Gram analizinden RSI deƒüerini al
            rsi_value = None
            if hasattr(self, '_last_gram_analysis') and self._last_gram_analysis:
                rsi_value = self._last_gram_analysis.get('indicators', {}).get('rsi')
            
            return {
                'cci': cci_analysis,
                'mfi': mfi_analysis,
                'combined_signal': combined_signal,
                'combined_confidence': combined_confidence,
                'divergence': cci_analysis.get('divergence') or mfi_analysis.get('divergence'),
                'rsi': rsi_value  # RSI deƒüerini ekle
            }
            
        except Exception as e:
            logger.error(f"Advanced indicators analiz hatasƒ±: {str(e)}")
            return {
                'cci': {'signal': 'NEUTRAL', 'confidence': 0},
                'mfi': {'signal': 'NEUTRAL', 'confidence': 0},
                'combined_signal': 'NEUTRAL',
                'combined_confidence': 0
            }
    
    def _analyze_patterns(self, gram_candles: List[GramAltinCandle]) -> Dict[str, Any]:
        """Pattern tanƒ±ma analizi"""
        try:
            # DataFrame'e √ßevir
            import pandas as pd
            data = []
            for candle in gram_candles:
                data.append({
                    'high': float(candle.high),
                    'low': float(candle.low),
                    'close': float(candle.close),
                    'open': float(candle.open)
                })
            
            df = pd.DataFrame(data)
            
            # Pattern analizi
            pattern_result = self.pattern_recognizer.analyze_all_patterns(df)
            
            # Son pattern'i sakla (Kelly hesaplamasƒ± i√ßin)
            self._last_pattern_analysis = pattern_result
            
            return pattern_result
            
        except Exception as e:
            logger.error(f"Pattern analiz hatasƒ±: {str(e)}")
            return {
                'pattern_found': False,
                'signal': 'NEUTRAL',
                'confidence': 0
            }
    
    def _calculate_kelly_position(self, signal: Dict, gram: Dict, currency: Dict) -> Dict[str, Any]:
        """Kelly Criterion ile pozisyon boyutu hesapla"""
        try:
            # Varsayƒ±lan sermaye (gram altƒ±n ticareti i√ßin makul miktar)
            capital = 10000  # 10K TL varsayƒ±lan (daha makul)
            
            # Fiyat ve stop loss
            current_price = float(gram.get('price', 0))
            
            # Stop loss kontrol√º - HOLD durumunda da ge√ßerli bir deƒüer olmalƒ±
            stop_loss_value = gram.get('stop_loss')
            if stop_loss_value is None or stop_loss_value == 0:
                # HOLD veya None durumunda varsayƒ±lan %2 risk kullan
                stop_loss = current_price * 0.98  # BUY i√ßin
            else:
                stop_loss = float(stop_loss_value)
            
            # Volatilite bazlƒ± g√ºven ayarlamasƒ±
            atr_value = gram.get('atr', {}).get('value', 1.0)
            market_volatility = atr_value / current_price * 100  # Y√ºzde olarak
            
            # Pattern g√ºc√º
            pattern_strength = 0.0
            if hasattr(self, '_last_pattern_analysis'):
                if self._last_pattern_analysis.get('pattern_found'):
                    pattern_strength = self._last_pattern_analysis.get('confidence', 0)
            
            # Risk ayarlƒ± g√ºven skoru
            adjusted_confidence = self.risk_manager.get_risk_adjusted_confidence(
                signal.get('confidence', 0.5),
                market_volatility,
                pattern_strength
            )
            
            # HOLD sinyali i√ßin √∂zel durum
            if signal.get('signal') == 'HOLD':
                # HOLD durumunda minimal pozisyon boyutu d√∂n
                position = {
                    'lots': 0.01,  # Minimal lot
                    'position_size': capital * 0.0001,  # %0.01 pozisyon
                    'risk_percentage': 0.01,
                    'risk_amount': capital * 0.0001,
                    'kelly_percentage': 0.0,
                    'confidence_adjusted': adjusted_confidence * 100,
                    'price_risk': 2.0,  # %2 varsayƒ±lan risk
                    'max_loss': capital * 0.0001
                }
            else:
                # Normal BUY/SELL pozisyon hesapla
                position = self.risk_manager.calculate_position_size(
                    capital,
                    current_price,
                    stop_loss,
                    adjusted_confidence
                )
            
            # Trading istatistikleri
            stats = self.risk_manager.calculate_trading_stats()
            
            return {
                **position,
                'trading_stats': stats,
                'adjusted_confidence': adjusted_confidence,
                'market_volatility': round(market_volatility, 2)
            }
            
        except Exception as e:
            logger.error(f"Kelly position hesaplama hatasƒ±: {str(e)}")
            return {
                'lots': 0.01,  # Minimum pozisyon
                'risk_percentage': 0.5,
                'error': str(e)
            }